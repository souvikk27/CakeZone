// <auto-generated />
using System;
using CakeZone.Services.Inventory.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CakeZone.Services.Inventory.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CakeZone.Services.Inventory.Model.Inventory", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StorageDepotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AverageDemand")
                        .HasColumnType("int");

                    b.Property<int>("CurrentLevel")
                        .HasColumnType("int");

                    b.Property<int>("Demand")
                        .HasColumnType("int");

                    b.Property<decimal>("HoldingCostPerUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("InventoryPosition")
                        .HasColumnType("int");

                    b.Property<int?>("LeadTime")
                        .HasColumnType("int");

                    b.Property<int?>("MaxLevel")
                        .HasColumnType("int");

                    b.Property<int>("MinLevel")
                        .HasColumnType("int");

                    b.Property<int?>("OrderFrequency")
                        .HasColumnType("int");

                    b.Property<int?>("OrderQuantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("OrderingCostPerOrder")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("OrdersOutstanding")
                        .HasColumnType("int");

                    b.Property<decimal?>("ShortageCostPerUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("StandardDeviationDemand")
                        .HasColumnType("int");

                    b.Property<int?>("UnitsShort")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "StorageDepotId");

                    b.HasIndex("CurrentLevel")
                        .HasDatabaseName("IX_Inventory_CurrentLevel");

                    b.HasIndex("MaxLevel")
                        .HasDatabaseName("IX_Inventory_MaxLevel");

                    b.HasIndex("MinLevel")
                        .HasDatabaseName("IX_Inventory_MinLevel");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("IX_Inventory_ProductId");

                    b.HasIndex("StorageDepotId")
                        .HasDatabaseName("IX_Inventory_StorageDepotId");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("CakeZone.Services.Inventory.Model.StockIssue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InventoryProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InventoryStorageDepotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("StorageDepotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IssueDate")
                        .HasDatabaseName("IX_StockIssue_IssueDate");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("IX_StockIssue_ProductId");

                    b.HasIndex("StorageDepotId")
                        .HasDatabaseName("IX_StockIssue_StorageDepotId");

                    b.HasIndex("InventoryProductId", "InventoryStorageDepotId");

                    b.ToTable("StockIssue");
                });

            modelBuilder.Entity("CakeZone.Services.Inventory.Model.StockReceipt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReceiptDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StorageDepotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("IX_StockReceipt_ProductId");

                    b.HasIndex("ReceiptDate")
                        .HasDatabaseName("IX_StockReceipt_ReceiptDate");

                    b.HasIndex("StorageDepotId")
                        .HasDatabaseName("IX_StockReceipt_StorageDepotId");

                    b.HasIndex("SupplierId")
                        .HasDatabaseName("IX_StockReceipt_SupplierId");

                    b.ToTable("StockReceipt");
                });

            modelBuilder.Entity("CakeZone.Services.Inventory.Model.StorageDepot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Address")
                        .HasDatabaseName("IX_StorageDepot_Address");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_StorageDepot_Name");

                    b.ToTable("StorageDepot");
                });

            modelBuilder.Entity("CakeZone.Services.Inventory.Model.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Address")
                        .HasDatabaseName("IX_Supplier_Address");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_Supplier_Email");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Supplier_Name");

                    b.HasIndex("Phone")
                        .HasDatabaseName("IX_Supplier_Phone");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("CakeZone.Services.Inventory.Model.Inventory", b =>
                {
                    b.HasOne("CakeZone.Services.Inventory.Model.StorageDepot", "StorageDepot")
                        .WithMany("Inventories")
                        .HasForeignKey("StorageDepotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StorageDepot");
                });

            modelBuilder.Entity("CakeZone.Services.Inventory.Model.StockIssue", b =>
                {
                    b.HasOne("CakeZone.Services.Inventory.Model.Inventory", "Inventory")
                        .WithMany("StockIssues")
                        .HasForeignKey("InventoryProductId", "InventoryStorageDepotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("CakeZone.Services.Inventory.Model.StockReceipt", b =>
                {
                    b.HasOne("CakeZone.Services.Inventory.Model.StorageDepot", "StorageDepot")
                        .WithMany("StockReceipts")
                        .HasForeignKey("StorageDepotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CakeZone.Services.Inventory.Model.Supplier", "Supplier")
                        .WithMany("StockReceipts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StorageDepot");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("CakeZone.Services.Inventory.Model.Inventory", b =>
                {
                    b.Navigation("StockIssues");
                });

            modelBuilder.Entity("CakeZone.Services.Inventory.Model.StorageDepot", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("StockReceipts");
                });

            modelBuilder.Entity("CakeZone.Services.Inventory.Model.Supplier", b =>
                {
                    b.Navigation("StockReceipts");
                });
#pragma warning restore 612, 618
        }
    }
}
